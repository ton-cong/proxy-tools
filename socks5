#!/bin/bash

# Define color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

DANTE_CONFIG="/etc/danted.conf"
DANTE_SERVICE="/etc/systemd/system/danted.service"
DANTE_BIN="/usr/local/sbin/sockd"

# Function to URL-encode username and password
url_encode() {
    local raw="$1"
    local encoded=""
    for (( i=0; i<${#raw}; i++ )); do
        char="${raw:i:1}"
        case "$char" in
            [a-zA-Z0-9._~-]) encoded+="$char" ;;
            *) encoded+=$(printf '%%%02X' "'$char") ;;
        esac
    done
    echo "$encoded"
}

# Function to get public IP
get_public_ip() {
    curl -s ifconfig.me || curl -s icanhazip.com || hostname -I | awk '{print $1}'
}

# Function to get network interface
get_network_interface() {
    ip -o -4 route show to default | awk '{print $5}' | head -n1
}

# Function to install Dante from source
install_dante() {
    echo -e "${YELLOW}Installing dependencies...${NC}"
    sudo yum install -y gcc make wget tar shadow-utils curl >/dev/null 2>&1
    
    echo -e "${YELLOW}Downloading and building Dante Server...${NC}"
    cd /tmp
    if [ ! -f "dante-1.4.3.tar.gz" ]; then
        wget -q https://www.inet.no/dante/files/dante-1.4.3.tar.gz
    fi
    
    tar xzf dante-1.4.3.tar.gz >/dev/null 2>&1
    cd dante-1.4.3
    
    ./configure >/dev/null 2>&1
    make >/dev/null 2>&1
    sudo make install >/dev/null 2>&1
    
    cd /tmp
    rm -rf dante-1.4.3*
    
    echo -e "${GREEN}Dante SOCKS5 server installed successfully.${NC}"
}

# Function to create Dante configuration
create_dante_config() {
    local port=$1
    local interface=$(get_network_interface)
    
    sudo bash -c "cat <<EOF > $DANTE_CONFIG
logoutput: /var/log/danted.log
internal: 0.0.0.0 port = $port
external: $interface
method: username
user.privileged: root
user.notprivileged: nobody
client pass {
    from: 0/0 to: 0/0
    log: connect disconnect error
}
socks pass {
    from: 0/0 to: 0/0
    log: connect disconnect error
}
EOF"
    
    echo -e "${GREEN}Configuration file created successfully.${NC}"
}

# Function to create systemd service
create_systemd_service() {
    sudo bash -c "cat <<EOF > $DANTE_SERVICE
[Unit]
Description=Dante SOCKS5 Server
After=network.target

[Service]
ExecStart=$DANTE_BIN -f $DANTE_CONFIG
Restart=always
RestartSec=3

[Install]
WantedBy=multi-user.target
EOF"
    
    sudo systemctl daemon-reload
    sudo systemctl enable danted >/dev/null 2>&1
    echo -e "${GREEN}Systemd service created successfully.${NC}"
}

# Check if danted is installed
if [ -f "$DANTE_BIN" ]; then
    echo -e "${GREEN}Dante SOCKS5 server is already installed.${NC}"
    echo -e "${CYAN}Do you want to (1) Reconfigure, (2) Add a new user, (3) Uninstall, or (4) Exit? (Enter 1, 2, 3, or 4):${NC}"
    read choice
    if [[ "$choice" == "1" ]]; then
        echo -e "${CYAN}Reconfiguring requires a port. Please enter the port for the SOCKS5 proxy (default: 1080):${NC}"
        read port
        port=${port:-1080}
        if ! [[ "$port" =~ ^[0-9]+$ ]] || (( port < 1 || port > 65535 )); then
            echo -e "${RED}Invalid port. Please enter a number between 1 and 65535.${NC}"
            exit 1
        fi
        reconfigure=true
        add_user=false
    elif [[ "$choice" == "2" ]]; then
        echo -e "${CYAN}Adding a new user...${NC}"
        reconfigure=false
        add_user=true
        # Get current port from config
        port=$(grep "port =" $DANTE_CONFIG 2>/dev/null | awk '{print $4}')
    elif [[ "$choice" == "3" ]]; then
        echo -e "${YELLOW}Uninstalling Dante SOCKS5 server...${NC}"
        sudo systemctl stop danted
        sudo systemctl disable danted
        sudo rm -f $DANTE_SERVICE
        sudo rm -f $DANTE_CONFIG
        sudo rm -f /var/log/danted.log
        sudo rm -f $DANTE_BIN
        sudo rm -rf /usr/local/lib/libdsocks*
        echo -e "${GREEN}Dante SOCKS5 server has been uninstalled successfully.${NC}"
        exit 0
    else
        echo -e "${YELLOW}Exiting.${NC}"
        exit 0
    fi
else
    echo -e "${YELLOW}Dante SOCKS5 server is not installed on this system.${NC}"
    echo -e "${CYAN}Note: Port 1080 is commonly used for SOCKS5 proxies. However, it may be blocked by your ISP or server provider. If this happens, choose an alternate port.${NC}"
    echo -e "${CYAN}Please enter the port for the SOCKS5 proxy (default: 1080):${NC}"
    read port
    port=${port:-1080}
    if ! [[ "$port" =~ ^[0-9]+$ ]] || (( port < 1 || port > 65535 )); then
        echo -e "${RED}Invalid port. Please enter a number between 1 and 65535.${NC}"
        exit 1
    fi
    reconfigure=true
    add_user=true
fi

# Install or Reconfigure Dante
if [[ "$reconfigure" == "true" ]]; then
    # Install Dante from source
    install_dante

    # Create the log file before starting the service
    sudo touch /var/log/danted.log
    sudo chown nobody:nobody /var/log/danted.log 2>/dev/null || sudo chown nobody:nogroup /var/log/danted.log 2>/dev/null

    # Create configuration
    create_dante_config $port

    # Configure firewall rules (Amazon Linux uses firewalld or iptables)
    if sudo firewall-cmd --state &>/dev/null; then
        sudo firewall-cmd --permanent --add-port="$port"/tcp >/dev/null 2>&1
        sudo firewall-cmd --reload >/dev/null 2>&1
    elif command -v iptables &>/dev/null; then
        if ! sudo iptables -L | grep -q "tcp dpt:$port"; then
            sudo iptables -A INPUT -p tcp --dport "$port" -j ACCEPT
            # Save iptables rules
            sudo service iptables save 2>/dev/null || sudo iptables-save | sudo tee /etc/sysconfig/iptables >/dev/null 2>&1
        fi
    fi

    # Create systemd service
    create_systemd_service

    # Reload the systemd daemon and restart the service
    sudo systemctl daemon-reload
    sudo systemctl restart danted
    sudo systemctl enable danted

    # Check if the service is active
    if systemctl is-active --quiet danted; then
        echo -e "${GREEN}\nSocks5 server has been reconfigured and is running on port - $port${NC}"
    else
        echo -e "${RED}\nFailed to start the Socks5 server. Please check the logs for more details: /var/log/danted.log${NC}"
        echo -e "${YELLOW}You can check the logs with: sudo journalctl -u danted -n 50${NC}"
        exit 1
    fi
fi

# Add user
if [[ "$add_user" == "true" ]]; then
    echo -e "${CYAN}Please enter the username for the SOCKS5 proxy:${NC}"
    read username
    echo -e "${CYAN}Please enter the password for the SOCKS5 proxy:${NC}"
    read -s password
    echo
    if id "$username" &>/dev/null; then
        echo -e "${YELLOW}User @$username already exists. Updating password.${NC}"
    else
        sudo useradd --shell /sbin/nologin "$username"
        echo -e "${GREEN}User @$username created successfully.${NC}"
    fi
    echo "$username:$password" | sudo chpasswd
    echo -e "${GREEN}Password updated successfully for user: $username.${NC}"
fi

# Test the SOCKS5 proxy
if [[ "$add_user" == "true" ]]; then
    echo -e "${CYAN}\nTesting the SOCKS5 proxy with curl...${NC}"
    proxy_ip=$(get_public_ip)
    encoded_username=$(url_encode "$username")
    encoded_password=$(url_encode "$password")

    echo -e "${YELLOW}Proxy Connection String:${NC}"
    echo -e "socks5://$encoded_username:$encoded_password@$proxy_ip:$port"
    echo

    curl -x socks5://"$encoded_username":"$encoded_password"@"$proxy_ip":"$port" https://ipinfo.io/

    if [[ $? -eq 0 ]]; then
        echo -e "${GREEN}\nSOCKS5 proxy test successful. Proxy is working.${NC}"
        echo -e "${GREEN}Your proxy is ready to use!${NC}"
        echo -e "${CYAN}Connection: socks5://$username:$password@$proxy_ip:$port${NC}"
    else
        echo -e "${RED}\nSOCKS5 proxy test failed. Please check your configuration.${NC}"
        echo -e "${YELLOW}Check logs: sudo journalctl -u danted -n 50${NC}"
    fi
fi
